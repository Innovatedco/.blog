@page "/createauthor"
@page "/editauthor/{Id:int}"
@inherits DataPage
@inject NavigationManager navMan
@attribute [Authorize]
<Menus />

<section>
    <div id="editor">
        <EditForm Model="@Author" OnValidSubmit="@Submit">
            <h3 class="title">@title</h3>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <RadzenStack Orientation="OrientationDirection" AlignItems="Alignment" Gap="0.5rem" class="my-3 vw-100">
                <RadzenFormField Text="Author Name" Variant="@variant">
                    <RadzenTextBox Name="author-name" @bind-Value="Author.AuthorName" Placeholder="Name" />
                </RadzenFormField>
                <RadzenFormField Text="Author Icon" Variant="@variant">                    
                    <RadzenUpload Accept="image/*" Url="upload/avatar" ChooseText="Select Image" @bind-value="Author.AuthorIcon" Complete="@((args) => OnUploadCompleted(args))" />
                        <Avatar Url="@Author.AuthorIcon" Classes="ms-1"/>
                </RadzenFormField>
            </RadzenStack>
            
            <button name="save" type="submit" class="btn btn-primary mt-1">Save</button>
            <button name="cancel" type="button" @onclick=Cancel class="btn btn-warning mt-1 me-1">Cancel</button>
        </EditForm>        
    </div>
</section>
<RadzenMediaQuery Query="(max-width: 960px)" Change=@OnChange />

@code {
    #region Member Variables
    /// <summary>
    /// Gets sets the AuthorId parameter
    /// </summary>
    [Parameter]
    public int? Id { get; set; }
    /// <summary>
    /// Sets the title tag
    /// </summary>
    public string? title { get; set; } = "Create Author";
    /// <summary>
    /// gets sets the Author Parameter
    /// </summary>
    [Parameter]
    public Author Author { get; set; } = new Author();
    /// <summary>
    /// Sets the variant for the RadzenStack
    /// </summary>
    Variant variant = Variant.Outlined;
    /// <summary>
    /// Sets whether the page function is edit/update
    /// </summary>
    private bool IsUpdate = false;
    /// <summary>
    /// Sets the Orientation of the Rad Stack based upon the media query
    /// </summary>
    public Orientation OrientationDirection { get; set; } = Orientation.Horizontal;
    /// <summary>
    /// Sets the alignment of the Rad Stack based upon the media query
    /// </summary>
    public AlignItems Alignment { get; set; } = AlignItems.Center;
    #endregion

    /// <summary>
    /// Determines whether the function of the page is edit or create and sets parameters accordingly
    /// This has to run after render as the post data is retrieved using a URL parameter
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id.HasValue)
            {
                var result = await AuthorService.GetAuthorByID(Id.Value);
                if (result != null)
                {
                    title = "Edit Author";
                    Author = result;
                    IsUpdate = true;
                    await InvokeAsync(StateHasChanged);
                }
                else navMan.NavigateTo(NavUrlHelpers.CreateAuthorUrlStub, true);
            }
            else
            {
                title = "Create Author";
                Author = new Author();
                IsUpdate = false;
            }
        }
    }

    /// <summary>
    /// Handles the submit button click, since the action is a form post, the method only runs if the model is valid.
    /// </summary>
    private async Task Submit()
    {
        if (IsUpdate)
        {
            await AuthorService.UpdateAuthor(Author);
        }
        else
        {
            await AuthorService.CreateAuthor(Author);
        }
        navMan.NavigateTo(NavUrlHelpers.ManageAuthorsUrlStub, true);
    }

    /// <summary>
    /// Handles the cancel button click, since the cancel button is only available on the edit page,
    /// canceling redirects to the post page
    /// </summary> 
    private void Cancel()
    {
        navMan.NavigateTo(NavUrlHelpers.ManageAuthorsUrlStub, true);
    }

    /// <summary>
    /// Handles the uploaded event and updates the Avatar with the result
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnUploadCompleted(UploadCompleteEventArgs args)
    {
        var options = new JsonSerializerOptions
            {
                AllowTrailingCommas = true
            };

        var avatarResult = JsonSerializer.Deserialize<ImageUploadResult>(args.RawResponse, options);
        Author.AuthorIcon = avatarResult.url;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handles the media query event which fires when the max-width 960px breakpoint is met
    /// and modifies form element orientation accordingly
    /// </summary>
    /// <param name="matches"></param>
    private void OnChange(bool matches)
    {
        if (!matches)
        {
            OrientationDirection = Orientation.Horizontal;
            Alignment = AlignItems.Center;
        }
        else
        {
            OrientationDirection = Orientation.Vertical;
            Alignment = AlignItems.Start;
        }
    }
}
