// <auto-generated />
using System;
using Blazor.Blog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blazor.Blog.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231122145838_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blazor.Blog.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorIcon = "/upload/image/author/small-11786136-2406-409a-a4ae-f9102cef92f0.jpg",
                            AuthorName = "Admin"
                        });
                });

            modelBuilder.Entity("Blazor.Blog.Models.BlogCategory", b =>
                {
                    b.Property<Guid>("BlogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CategoryNameNormalized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogCategoryId");

                    b.ToTable("BlogCategory");

                    b.HasData(
                        new
                        {
                            BlogCategoryId = new Guid("ea072a8b-48f9-4529-b00e-8ce536d5f576"),
                            CategoryName = "News",
                            CategoryNameNormalized = "news",
                            Icon = "fa-newspaper"
                        });
                });

            modelBuilder.Entity("Blazor.Blog.Models.BlogPost", b =>
                {
                    b.Property<Guid>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<Guid>("BlogCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogPostId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("BlogPost");

                    b.HasData(
                        new
                        {
                            BlogPostId = new Guid("28478684-7ea6-472d-b5f0-fe1ed24b4543"),
                            Archived = false,
                            AuthorId = 1,
                            BlogCategoryId = new Guid("ea072a8b-48f9-4529-b00e-8ce536d5f576"),
                            Created = new DateTime(2023, 11, 20, 23, 58, 38, 173, DateTimeKind.Local).AddTicks(2787),
                            NormalizedTitle = "add-code-snippets-to-posts",
                            Post = "<img src=\"/upload/image/f9472e3f-659d-44ba-b887-2df3d20fc472.jpg\" class=\"w-100 mb-3\"/><p>You can also add code snippets to posts using the highlighter.js plugin, the code should be enclosed in a &ltpre&gt;&ltcode&gt;Code goes here&lt/pre&gt;&lt/code&gt; block. </p><p>We have already added some language specific formatting for C#, Html &amp; Json. Just add the css class lang-csharp to the code tag. </p><pre><code class=\"lang-csharp\">public void HelloWorld() => Console.Writeline(\"Hello .blog\");</code></pre>",
                            Published = true,
                            ThumbnailUrl = "/upload/image/thumb/small-f9472e3f-659d-44ba-b887-2df3d20fc472.jpg",
                            Title = "Add code snippets to posts",
                            Updated = new DateTime(2023, 11, 20, 23, 58, 38, 173, DateTimeKind.Local).AddTicks(2787)
                        },
                        new
                        {
                            BlogPostId = new Guid("b40902d5-1328-429f-ba28-395f526b3f8a"),
                            Archived = false,
                            AuthorId = 1,
                            BlogCategoryId = new Guid("ea072a8b-48f9-4529-b00e-8ce536d5f576"),
                            Created = new DateTime(2023, 11, 21, 23, 58, 38, 173, DateTimeKind.Local).AddTicks(2787),
                            NormalizedTitle = "adding-category-icons",
                            Post = "<img src=\"/upload/image/fc635c36-a3af-4da7-977b-f4cc86b450e3.png\" class=\"w-100 mb-3\"><p>You can add or change icons for categories easily on the Category Create or Category edit page.</p><p>We've already added the required font awesome CSS and Javascript so just search for the icon you would like to use on the <a href=\"https://fontawesome.com/search?o=r&m=free\">font awesome site.</a></p><p>You should only choose from the free icons and it's as simple as adding the css class to the icon text box</p>\r\n<p>Note: the fa-solid class is automatically added, so you only need add the icon class e.g. fa-newspaper, however, for fa-brand icons both classes should be added e.g. fa-brand fa-microsoft. </p><p>You can also check the icon code by clicking the check button, if the icon code is correct, then the icon will appear in the icon box.</p>",
                            Published = true,
                            ThumbnailUrl = "/upload/image/thumb/small-fc635c36-a3af-4da7-977b-f4cc86b450e3.png",
                            Title = "Adding category icons",
                            Updated = new DateTime(2023, 11, 21, 23, 58, 38, 173, DateTimeKind.Local).AddTicks(2787)
                        },
                        new
                        {
                            BlogPostId = new Guid("3b5d0654-a5ea-4773-989c-984fe75ec33d"),
                            Archived = false,
                            AuthorId = 1,
                            BlogCategoryId = new Guid("ea072a8b-48f9-4529-b00e-8ce536d5f576"),
                            Created = new DateTime(2023, 11, 22, 23, 58, 38, 173, DateTimeKind.Local).AddTicks(2787),
                            NormalizedTitle = "getting-started",
                            Post = "<img src=\"/upload/image/09d237bc-6557-43e7-99b8-6835dc75fc9b.jpg\" class=\"w-100 mb-3\"/><p>We added some posts to get you started, a category called news to store them in and an author called Admin. Don't worry, you can archive, unpublish or modify them at any time and create your own posts, categories and authors.</p><p>First things first, if you haven't already done so, you will need to un-comment line 16 in the program.cs file and rebuild.</p><p>This will enable access to the login creation page, so go there now and create a login for yourself: <a href=\"/account/create\">/account/create</a>, use an email address and the password of your choice.</p><p>Now you have an account, you MUST now comment out or delete (recommended) line 16 in program.cs (and rebuild).</p><p>And that's it! You can now log in and edit this post/category/author or create your own. Happy Blogging</p>",
                            Published = true,
                            ThumbnailUrl = "/upload/image/thumb/small-09d237bc-6557-43e7-99b8-6835dc75fc9b.jpg",
                            Title = "Getting started",
                            Updated = new DateTime(2023, 11, 22, 23, 58, 38, 173, DateTimeKind.Local).AddTicks(2787)
                        });
                });

            modelBuilder.Entity("Blazor.Blog.Models.SiteSettings", b =>
                {
                    b.Property<Guid>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SiteDevUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteLogoSmall")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteProdUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteTagLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiteId");

                    b.ToTable("SiteSetings");

                    b.HasData(
                        new
                        {
                            SiteId = new Guid("38d31336-c55a-402a-a276-ccc2540d491b"),
                            SiteDevUrl = "https://localhost:7079",
                            SiteLogo = "upload/image/logo/logo.png",
                            SiteLogoSmall = "upload/image/logosmall/logosmall.png",
                            SiteName = ".blog",
                            SiteProdUrl = "https://blazor.blog",
                            SiteTagLine = "Talking about life, the universe and everything"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Blazor.Blog.Models.BlogPost", b =>
                {
                    b.HasOne("Blazor.Blog.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blazor.Blog.Models.BlogCategory", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blazor.Blog.Models.BlogCategory", b =>
                {
                    b.Navigation("BlogPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
